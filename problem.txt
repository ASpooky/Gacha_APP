今後の課題

gitと連携させる.→〇

requestとresponseの型を適切に使う.→▲
ルータ内に記述された関数を分割することで可読性を上げる.→〇
各所メソッドやsqlの理解を深める.
エラーハンドリングは適切かどうか

dockerを使っているときにsqlのguiは?→docker使っていようが関係ない

characterテーブルの初期化に手間取る→解決

これからハンドラーを作るガチャ本体の定義。
ガチャ
    まず一回一回、レアリティを決める.[例:1~5]
    そのレアリティのキャラクターテーブルから一体抽出し、リザルトに格納していく.
    mysqlのRAND()を使えば、キャラクターはランダムに決定できそう.

(〇)レアリティのような長期間変わることのないデータはdbから何度も呼び出すのではなく、起動時に一度だけ読み込んでメモリに保存しておく.
()認証・アクセスログ・エラーハンドリングのmiddlewareの追加
(〇)バルクインサート:一気にインサートする.
(〇)quantityはなくしたほうがいいかも→sqlアンチデザイン
(▲)sqlinit:sqlの初期化.
(〇)golangci-lint
